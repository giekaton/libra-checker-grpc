/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var validator_change_pb = require('./validator_change_pb.js');
goog.object.extend(proto, validator_change_pb);
goog.exportSymbol('proto.consensus.Block', null, global);
goog.exportSymbol('proto.consensus.ConsensusMsg', null, global);
goog.exportSymbol('proto.consensus.Proposal', null, global);
goog.exportSymbol('proto.consensus.RequestBlock', null, global);
goog.exportSymbol('proto.consensus.RequestEpoch', null, global);
goog.exportSymbol('proto.consensus.RespondBlock', null, global);
goog.exportSymbol('proto.consensus.SyncInfo', null, global);
goog.exportSymbol('proto.consensus.VoteMsg', null, global);
goog.exportSymbol('proto.consensus.VoteProposal', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.ConsensusMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.consensus.ConsensusMsg.oneofGroups_);
};
goog.inherits(proto.consensus.ConsensusMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.consensus.ConsensusMsg.displayName = 'proto.consensus.ConsensusMsg';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.consensus.ConsensusMsg.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.consensus.ConsensusMsg.MessageCase = {
  MESSAGE_NOT_SET: 0,
  PROPOSAL: 1,
  VOTE_MSG: 2,
  REQUEST_BLOCK: 3,
  RESPOND_BLOCK: 4,
  SYNC_INFO: 5,
  EPOCH_CHANGE: 6,
  REQUEST_EPOCH: 7
};

/**
 * @return {proto.consensus.ConsensusMsg.MessageCase}
 */
proto.consensus.ConsensusMsg.prototype.getMessageCase = function() {
  return /** @type {proto.consensus.ConsensusMsg.MessageCase} */(jspb.Message.computeOneofCase(this, proto.consensus.ConsensusMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.ConsensusMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.ConsensusMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.ConsensusMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.ConsensusMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    proposal: (f = msg.getProposal()) && proto.consensus.Proposal.toObject(includeInstance, f),
    voteMsg: (f = msg.getVoteMsg()) && proto.consensus.VoteMsg.toObject(includeInstance, f),
    requestBlock: (f = msg.getRequestBlock()) && proto.consensus.RequestBlock.toObject(includeInstance, f),
    respondBlock: (f = msg.getRespondBlock()) && proto.consensus.RespondBlock.toObject(includeInstance, f),
    syncInfo: (f = msg.getSyncInfo()) && proto.consensus.SyncInfo.toObject(includeInstance, f),
    epochChange: (f = msg.getEpochChange()) && validator_change_pb.ValidatorChangeEventWithProof.toObject(includeInstance, f),
    requestEpoch: (f = msg.getRequestEpoch()) && proto.consensus.RequestEpoch.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.ConsensusMsg}
 */
proto.consensus.ConsensusMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.ConsensusMsg;
  return proto.consensus.ConsensusMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.ConsensusMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.ConsensusMsg}
 */
proto.consensus.ConsensusMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.consensus.Proposal;
      reader.readMessage(value,proto.consensus.Proposal.deserializeBinaryFromReader);
      msg.setProposal(value);
      break;
    case 2:
      var value = new proto.consensus.VoteMsg;
      reader.readMessage(value,proto.consensus.VoteMsg.deserializeBinaryFromReader);
      msg.setVoteMsg(value);
      break;
    case 3:
      var value = new proto.consensus.RequestBlock;
      reader.readMessage(value,proto.consensus.RequestBlock.deserializeBinaryFromReader);
      msg.setRequestBlock(value);
      break;
    case 4:
      var value = new proto.consensus.RespondBlock;
      reader.readMessage(value,proto.consensus.RespondBlock.deserializeBinaryFromReader);
      msg.setRespondBlock(value);
      break;
    case 5:
      var value = new proto.consensus.SyncInfo;
      reader.readMessage(value,proto.consensus.SyncInfo.deserializeBinaryFromReader);
      msg.setSyncInfo(value);
      break;
    case 6:
      var value = new validator_change_pb.ValidatorChangeEventWithProof;
      reader.readMessage(value,validator_change_pb.ValidatorChangeEventWithProof.deserializeBinaryFromReader);
      msg.setEpochChange(value);
      break;
    case 7:
      var value = new proto.consensus.RequestEpoch;
      reader.readMessage(value,proto.consensus.RequestEpoch.deserializeBinaryFromReader);
      msg.setRequestEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.ConsensusMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.ConsensusMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.ConsensusMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.ConsensusMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProposal();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.consensus.Proposal.serializeBinaryToWriter
    );
  }
  f = message.getVoteMsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.consensus.VoteMsg.serializeBinaryToWriter
    );
  }
  f = message.getRequestBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.consensus.RequestBlock.serializeBinaryToWriter
    );
  }
  f = message.getRespondBlock();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.consensus.RespondBlock.serializeBinaryToWriter
    );
  }
  f = message.getSyncInfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.consensus.SyncInfo.serializeBinaryToWriter
    );
  }
  f = message.getEpochChange();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      validator_change_pb.ValidatorChangeEventWithProof.serializeBinaryToWriter
    );
  }
  f = message.getRequestEpoch();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.consensus.RequestEpoch.serializeBinaryToWriter
    );
  }
};


/**
 * optional Proposal proposal = 1;
 * @return {?proto.consensus.Proposal}
 */
proto.consensus.ConsensusMsg.prototype.getProposal = function() {
  return /** @type{?proto.consensus.Proposal} */ (
    jspb.Message.getWrapperField(this, proto.consensus.Proposal, 1));
};


/** @param {?proto.consensus.Proposal|undefined} value */
proto.consensus.ConsensusMsg.prototype.setProposal = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.consensus.ConsensusMsg.oneofGroups_[0], value);
};


proto.consensus.ConsensusMsg.prototype.clearProposal = function() {
  this.setProposal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.ConsensusMsg.prototype.hasProposal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VoteMsg vote_msg = 2;
 * @return {?proto.consensus.VoteMsg}
 */
proto.consensus.ConsensusMsg.prototype.getVoteMsg = function() {
  return /** @type{?proto.consensus.VoteMsg} */ (
    jspb.Message.getWrapperField(this, proto.consensus.VoteMsg, 2));
};


/** @param {?proto.consensus.VoteMsg|undefined} value */
proto.consensus.ConsensusMsg.prototype.setVoteMsg = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.consensus.ConsensusMsg.oneofGroups_[0], value);
};


proto.consensus.ConsensusMsg.prototype.clearVoteMsg = function() {
  this.setVoteMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.ConsensusMsg.prototype.hasVoteMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestBlock request_block = 3;
 * @return {?proto.consensus.RequestBlock}
 */
proto.consensus.ConsensusMsg.prototype.getRequestBlock = function() {
  return /** @type{?proto.consensus.RequestBlock} */ (
    jspb.Message.getWrapperField(this, proto.consensus.RequestBlock, 3));
};


/** @param {?proto.consensus.RequestBlock|undefined} value */
proto.consensus.ConsensusMsg.prototype.setRequestBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.consensus.ConsensusMsg.oneofGroups_[0], value);
};


proto.consensus.ConsensusMsg.prototype.clearRequestBlock = function() {
  this.setRequestBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.ConsensusMsg.prototype.hasRequestBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RespondBlock respond_block = 4;
 * @return {?proto.consensus.RespondBlock}
 */
proto.consensus.ConsensusMsg.prototype.getRespondBlock = function() {
  return /** @type{?proto.consensus.RespondBlock} */ (
    jspb.Message.getWrapperField(this, proto.consensus.RespondBlock, 4));
};


/** @param {?proto.consensus.RespondBlock|undefined} value */
proto.consensus.ConsensusMsg.prototype.setRespondBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.consensus.ConsensusMsg.oneofGroups_[0], value);
};


proto.consensus.ConsensusMsg.prototype.clearRespondBlock = function() {
  this.setRespondBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.ConsensusMsg.prototype.hasRespondBlock = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SyncInfo sync_info = 5;
 * @return {?proto.consensus.SyncInfo}
 */
proto.consensus.ConsensusMsg.prototype.getSyncInfo = function() {
  return /** @type{?proto.consensus.SyncInfo} */ (
    jspb.Message.getWrapperField(this, proto.consensus.SyncInfo, 5));
};


/** @param {?proto.consensus.SyncInfo|undefined} value */
proto.consensus.ConsensusMsg.prototype.setSyncInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.consensus.ConsensusMsg.oneofGroups_[0], value);
};


proto.consensus.ConsensusMsg.prototype.clearSyncInfo = function() {
  this.setSyncInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.ConsensusMsg.prototype.hasSyncInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional types.ValidatorChangeEventWithProof epoch_change = 6;
 * @return {?proto.types.ValidatorChangeEventWithProof}
 */
proto.consensus.ConsensusMsg.prototype.getEpochChange = function() {
  return /** @type{?proto.types.ValidatorChangeEventWithProof} */ (
    jspb.Message.getWrapperField(this, validator_change_pb.ValidatorChangeEventWithProof, 6));
};


/** @param {?proto.types.ValidatorChangeEventWithProof|undefined} value */
proto.consensus.ConsensusMsg.prototype.setEpochChange = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.consensus.ConsensusMsg.oneofGroups_[0], value);
};


proto.consensus.ConsensusMsg.prototype.clearEpochChange = function() {
  this.setEpochChange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.ConsensusMsg.prototype.hasEpochChange = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RequestEpoch request_epoch = 7;
 * @return {?proto.consensus.RequestEpoch}
 */
proto.consensus.ConsensusMsg.prototype.getRequestEpoch = function() {
  return /** @type{?proto.consensus.RequestEpoch} */ (
    jspb.Message.getWrapperField(this, proto.consensus.RequestEpoch, 7));
};


/** @param {?proto.consensus.RequestEpoch|undefined} value */
proto.consensus.ConsensusMsg.prototype.setRequestEpoch = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.consensus.ConsensusMsg.oneofGroups_[0], value);
};


proto.consensus.ConsensusMsg.prototype.clearRequestEpoch = function() {
  this.setRequestEpoch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.consensus.ConsensusMsg.prototype.hasRequestEpoch = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.consensus.Proposal.displayName = 'proto.consensus.Proposal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.Proposal}
 */
proto.consensus.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.Proposal;
  return proto.consensus.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.Proposal}
 */
proto.consensus.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.consensus.Proposal.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes = 1;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.consensus.Proposal.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.consensus.Proposal.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.consensus.Proposal.prototype.setBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.SyncInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.SyncInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.consensus.SyncInfo.displayName = 'proto.consensus.SyncInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.SyncInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.SyncInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.SyncInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.SyncInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.SyncInfo}
 */
proto.consensus.SyncInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.SyncInfo;
  return proto.consensus.SyncInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.SyncInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.SyncInfo}
 */
proto.consensus.SyncInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.SyncInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.SyncInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.SyncInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.SyncInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.consensus.SyncInfo.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes = 1;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.consensus.SyncInfo.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.consensus.SyncInfo.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.consensus.SyncInfo.prototype.setBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.consensus.Block.displayName = 'proto.consensus.Block';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.Block}
 */
proto.consensus.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.Block;
  return proto.consensus.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.Block}
 */
proto.consensus.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.consensus.Block.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes = 1;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.consensus.Block.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.consensus.Block.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.consensus.Block.prototype.setBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.VoteMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.VoteMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.consensus.VoteMsg.displayName = 'proto.consensus.VoteMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.VoteMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.VoteMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.VoteMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.VoteMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.VoteMsg}
 */
proto.consensus.VoteMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.VoteMsg;
  return proto.consensus.VoteMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.VoteMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.VoteMsg}
 */
proto.consensus.VoteMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.VoteMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.VoteMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.VoteMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.VoteMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.consensus.VoteMsg.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes = 1;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.consensus.VoteMsg.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.consensus.VoteMsg.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.consensus.VoteMsg.prototype.setBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.VoteProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.VoteProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.consensus.VoteProposal.displayName = 'proto.consensus.VoteProposal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.VoteProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.VoteProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.VoteProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.VoteProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.VoteProposal}
 */
proto.consensus.VoteProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.VoteProposal;
  return proto.consensus.VoteProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.VoteProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.VoteProposal}
 */
proto.consensus.VoteProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.VoteProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.VoteProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.VoteProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.VoteProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.consensus.VoteProposal.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes = 1;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.consensus.VoteProposal.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.consensus.VoteProposal.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.consensus.VoteProposal.prototype.setBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.RequestBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.RequestBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.consensus.RequestBlock.displayName = 'proto.consensus.RequestBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.RequestBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.RequestBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.RequestBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.RequestBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.RequestBlock}
 */
proto.consensus.RequestBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.RequestBlock;
  return proto.consensus.RequestBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.RequestBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.RequestBlock}
 */
proto.consensus.RequestBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.RequestBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.RequestBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.RequestBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.RequestBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.consensus.RequestBlock.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes = 1;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.consensus.RequestBlock.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.consensus.RequestBlock.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.consensus.RequestBlock.prototype.setBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.RespondBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.RespondBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.consensus.RespondBlock.displayName = 'proto.consensus.RespondBlock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.RespondBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.RespondBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.RespondBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.RespondBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.RespondBlock}
 */
proto.consensus.RespondBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.RespondBlock;
  return proto.consensus.RespondBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.RespondBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.RespondBlock}
 */
proto.consensus.RespondBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.RespondBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.RespondBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.RespondBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.RespondBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.consensus.RespondBlock.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes = 1;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.consensus.RespondBlock.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.consensus.RespondBlock.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.consensus.RespondBlock.prototype.setBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.consensus.RequestEpoch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.consensus.RequestEpoch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.consensus.RequestEpoch.displayName = 'proto.consensus.RequestEpoch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.consensus.RequestEpoch.prototype.toObject = function(opt_includeInstance) {
  return proto.consensus.RequestEpoch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.consensus.RequestEpoch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.RequestEpoch.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.consensus.RequestEpoch}
 */
proto.consensus.RequestEpoch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.consensus.RequestEpoch;
  return proto.consensus.RequestEpoch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.consensus.RequestEpoch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.consensus.RequestEpoch}
 */
proto.consensus.RequestEpoch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.consensus.RequestEpoch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.consensus.RequestEpoch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.consensus.RequestEpoch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.consensus.RequestEpoch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.consensus.RequestEpoch.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bytes = 1;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.consensus.RequestEpoch.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.consensus.RequestEpoch.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.consensus.RequestEpoch.prototype.setBytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.consensus);
