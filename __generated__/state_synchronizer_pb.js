/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ledger_info_pb = require('./ledger_info_pb.js');
goog.object.extend(proto, ledger_info_pb);
var transaction_pb = require('./transaction_pb.js');
goog.object.extend(proto, transaction_pb);
goog.exportSymbol('proto.state_synchronizer.GetChunkRequest', null, global);
goog.exportSymbol('proto.state_synchronizer.GetChunkResponse', null, global);
goog.exportSymbol('proto.state_synchronizer.StateSynchronizerMsg', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state_synchronizer.GetChunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state_synchronizer.GetChunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.state_synchronizer.GetChunkRequest.displayName = 'proto.state_synchronizer.GetChunkRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state_synchronizer.GetChunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.state_synchronizer.GetChunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state_synchronizer.GetChunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state_synchronizer.GetChunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    knownVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeout: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ledgerInfoWithSigs: (f = msg.getLedgerInfoWithSigs()) && ledger_info_pb.LedgerInfoWithSignatures.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state_synchronizer.GetChunkRequest}
 */
proto.state_synchronizer.GetChunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state_synchronizer.GetChunkRequest;
  return proto.state_synchronizer.GetChunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state_synchronizer.GetChunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state_synchronizer.GetChunkRequest}
 */
proto.state_synchronizer.GetChunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setKnownVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeout(value);
      break;
    case 4:
      var value = new ledger_info_pb.LedgerInfoWithSignatures;
      reader.readMessage(value,ledger_info_pb.LedgerInfoWithSignatures.deserializeBinaryFromReader);
      msg.setLedgerInfoWithSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state_synchronizer.GetChunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state_synchronizer.GetChunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state_synchronizer.GetChunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state_synchronizer.GetChunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKnownVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getLedgerInfoWithSigs();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ledger_info_pb.LedgerInfoWithSignatures.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 known_version = 1;
 * @return {number}
 */
proto.state_synchronizer.GetChunkRequest.prototype.getKnownVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.state_synchronizer.GetChunkRequest.prototype.setKnownVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 limit = 2;
 * @return {number}
 */
proto.state_synchronizer.GetChunkRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.state_synchronizer.GetChunkRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 timeout = 3;
 * @return {number}
 */
proto.state_synchronizer.GetChunkRequest.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.state_synchronizer.GetChunkRequest.prototype.setTimeout = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional types.LedgerInfoWithSignatures ledger_info_with_sigs = 4;
 * @return {?proto.types.LedgerInfoWithSignatures}
 */
proto.state_synchronizer.GetChunkRequest.prototype.getLedgerInfoWithSigs = function() {
  return /** @type{?proto.types.LedgerInfoWithSignatures} */ (
    jspb.Message.getWrapperField(this, ledger_info_pb.LedgerInfoWithSignatures, 4));
};


/** @param {?proto.types.LedgerInfoWithSignatures|undefined} value */
proto.state_synchronizer.GetChunkRequest.prototype.setLedgerInfoWithSigs = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.state_synchronizer.GetChunkRequest.prototype.clearLedgerInfoWithSigs = function() {
  this.setLedgerInfoWithSigs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state_synchronizer.GetChunkRequest.prototype.hasLedgerInfoWithSigs = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state_synchronizer.GetChunkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state_synchronizer.GetChunkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.state_synchronizer.GetChunkResponse.displayName = 'proto.state_synchronizer.GetChunkResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state_synchronizer.GetChunkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.state_synchronizer.GetChunkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state_synchronizer.GetChunkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state_synchronizer.GetChunkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerInfoWithSigs: (f = msg.getLedgerInfoWithSigs()) && ledger_info_pb.LedgerInfoWithSignatures.toObject(includeInstance, f),
    txnListWithProof: (f = msg.getTxnListWithProof()) && transaction_pb.TransactionListWithProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state_synchronizer.GetChunkResponse}
 */
proto.state_synchronizer.GetChunkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state_synchronizer.GetChunkResponse;
  return proto.state_synchronizer.GetChunkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state_synchronizer.GetChunkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state_synchronizer.GetChunkResponse}
 */
proto.state_synchronizer.GetChunkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ledger_info_pb.LedgerInfoWithSignatures;
      reader.readMessage(value,ledger_info_pb.LedgerInfoWithSignatures.deserializeBinaryFromReader);
      msg.setLedgerInfoWithSigs(value);
      break;
    case 2:
      var value = new transaction_pb.TransactionListWithProof;
      reader.readMessage(value,transaction_pb.TransactionListWithProof.deserializeBinaryFromReader);
      msg.setTxnListWithProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state_synchronizer.GetChunkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state_synchronizer.GetChunkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state_synchronizer.GetChunkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state_synchronizer.GetChunkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerInfoWithSigs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ledger_info_pb.LedgerInfoWithSignatures.serializeBinaryToWriter
    );
  }
  f = message.getTxnListWithProof();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      transaction_pb.TransactionListWithProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional types.LedgerInfoWithSignatures ledger_info_with_sigs = 1;
 * @return {?proto.types.LedgerInfoWithSignatures}
 */
proto.state_synchronizer.GetChunkResponse.prototype.getLedgerInfoWithSigs = function() {
  return /** @type{?proto.types.LedgerInfoWithSignatures} */ (
    jspb.Message.getWrapperField(this, ledger_info_pb.LedgerInfoWithSignatures, 1));
};


/** @param {?proto.types.LedgerInfoWithSignatures|undefined} value */
proto.state_synchronizer.GetChunkResponse.prototype.setLedgerInfoWithSigs = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.state_synchronizer.GetChunkResponse.prototype.clearLedgerInfoWithSigs = function() {
  this.setLedgerInfoWithSigs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state_synchronizer.GetChunkResponse.prototype.hasLedgerInfoWithSigs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional types.TransactionListWithProof txn_list_with_proof = 2;
 * @return {?proto.types.TransactionListWithProof}
 */
proto.state_synchronizer.GetChunkResponse.prototype.getTxnListWithProof = function() {
  return /** @type{?proto.types.TransactionListWithProof} */ (
    jspb.Message.getWrapperField(this, transaction_pb.TransactionListWithProof, 2));
};


/** @param {?proto.types.TransactionListWithProof|undefined} value */
proto.state_synchronizer.GetChunkResponse.prototype.setTxnListWithProof = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.state_synchronizer.GetChunkResponse.prototype.clearTxnListWithProof = function() {
  this.setTxnListWithProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state_synchronizer.GetChunkResponse.prototype.hasTxnListWithProof = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state_synchronizer.StateSynchronizerMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.state_synchronizer.StateSynchronizerMsg.oneofGroups_);
};
goog.inherits(proto.state_synchronizer.StateSynchronizerMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.state_synchronizer.StateSynchronizerMsg.displayName = 'proto.state_synchronizer.StateSynchronizerMsg';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.state_synchronizer.StateSynchronizerMsg.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.state_synchronizer.StateSynchronizerMsg.MessageCase = {
  MESSAGE_NOT_SET: 0,
  CHUNK_REQUEST: 1,
  CHUNK_RESPONSE: 2
};

/**
 * @return {proto.state_synchronizer.StateSynchronizerMsg.MessageCase}
 */
proto.state_synchronizer.StateSynchronizerMsg.prototype.getMessageCase = function() {
  return /** @type {proto.state_synchronizer.StateSynchronizerMsg.MessageCase} */(jspb.Message.computeOneofCase(this, proto.state_synchronizer.StateSynchronizerMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state_synchronizer.StateSynchronizerMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.state_synchronizer.StateSynchronizerMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state_synchronizer.StateSynchronizerMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state_synchronizer.StateSynchronizerMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunkRequest: (f = msg.getChunkRequest()) && proto.state_synchronizer.GetChunkRequest.toObject(includeInstance, f),
    chunkResponse: (f = msg.getChunkResponse()) && proto.state_synchronizer.GetChunkResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state_synchronizer.StateSynchronizerMsg}
 */
proto.state_synchronizer.StateSynchronizerMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state_synchronizer.StateSynchronizerMsg;
  return proto.state_synchronizer.StateSynchronizerMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state_synchronizer.StateSynchronizerMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state_synchronizer.StateSynchronizerMsg}
 */
proto.state_synchronizer.StateSynchronizerMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.state_synchronizer.GetChunkRequest;
      reader.readMessage(value,proto.state_synchronizer.GetChunkRequest.deserializeBinaryFromReader);
      msg.setChunkRequest(value);
      break;
    case 2:
      var value = new proto.state_synchronizer.GetChunkResponse;
      reader.readMessage(value,proto.state_synchronizer.GetChunkResponse.deserializeBinaryFromReader);
      msg.setChunkResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state_synchronizer.StateSynchronizerMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state_synchronizer.StateSynchronizerMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state_synchronizer.StateSynchronizerMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state_synchronizer.StateSynchronizerMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunkRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.state_synchronizer.GetChunkRequest.serializeBinaryToWriter
    );
  }
  f = message.getChunkResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.state_synchronizer.GetChunkResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetChunkRequest chunk_request = 1;
 * @return {?proto.state_synchronizer.GetChunkRequest}
 */
proto.state_synchronizer.StateSynchronizerMsg.prototype.getChunkRequest = function() {
  return /** @type{?proto.state_synchronizer.GetChunkRequest} */ (
    jspb.Message.getWrapperField(this, proto.state_synchronizer.GetChunkRequest, 1));
};


/** @param {?proto.state_synchronizer.GetChunkRequest|undefined} value */
proto.state_synchronizer.StateSynchronizerMsg.prototype.setChunkRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.state_synchronizer.StateSynchronizerMsg.oneofGroups_[0], value);
};


proto.state_synchronizer.StateSynchronizerMsg.prototype.clearChunkRequest = function() {
  this.setChunkRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state_synchronizer.StateSynchronizerMsg.prototype.hasChunkRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetChunkResponse chunk_response = 2;
 * @return {?proto.state_synchronizer.GetChunkResponse}
 */
proto.state_synchronizer.StateSynchronizerMsg.prototype.getChunkResponse = function() {
  return /** @type{?proto.state_synchronizer.GetChunkResponse} */ (
    jspb.Message.getWrapperField(this, proto.state_synchronizer.GetChunkResponse, 2));
};


/** @param {?proto.state_synchronizer.GetChunkResponse|undefined} value */
proto.state_synchronizer.StateSynchronizerMsg.prototype.setChunkResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.state_synchronizer.StateSynchronizerMsg.oneofGroups_[0], value);
};


proto.state_synchronizer.StateSynchronizerMsg.prototype.clearChunkResponse = function() {
  this.setChunkResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state_synchronizer.StateSynchronizerMsg.prototype.hasChunkResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.state_synchronizer);
